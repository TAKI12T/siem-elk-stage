input {
  beats {
    port => 5044
    type => "beats_input"
  }
}

filter {
  # Identifier les logs de backup Plesk
  if [log][file][path] =~ /backup\.log$/ {
    mutate {
      add_tag => ["plesk_backup"]
      add_field => { "[@metadata][log_type]" => "plesk_backup" }
    }
  }

  # Parsing des logs de backup Plesk
  if "plesk_backup" in [tags] {
    grok {
      match => {
        "message" => [
          # Format principal
          "^\[%{TIMESTAMP_ISO8601:event.created}\] %{LOGLEVEL:log.level}: Backup (?:of|for|process) (?:domain )?'%{DATA:host.name}'(?: \(%{DATA:message}\))?",
          # Format alternatif sans domaine
          "^\[%{TIMESTAMP_ISO8601:event.created}\] %{LOGLEVEL:log.level}: %{GREEDYDATA:message}"
        ]
      }
      overwrite => ["message"]
      tag_on_failure => ["_grokparsefailure_backup"]
    }

    date {
      match => ["event.created", "YYYY-MM-dd HH:mm:ss"]
      target => "@timestamp"
      timezone => "Europe/Paris"
      tag_on_failure => ["_dateparsefailure_backup"]
    }

    mutate {
      add_field => {
        "service.type"   => "backup"
        "labels.env"     => "production"
        "event.category" => "backup"
        "event.type"     => "info"
      }
      remove_field => ["event.original"]
    }

    # Ajout du log_source si disponible
    if [host][name] {
      mutate {
        rename => { "[host][name]" => "log_source" }
      }
    }

    # DÃ©duction de event.outcome selon log.level
    if [log][level] =~ /(ERROR|CRITICAL|ALERT)/ {
      mutate {
        add_field => { "event.outcome" => "failure" }
      }
    } else if [log][level] =~ /INFO/ {
      mutate {
        add_field => { "event.outcome" => "success" }
      }
    } else {
      mutate {
        add_field => { "event.outcome" => "unknown" }
      }
    }
  }
}

output {
  # Sortie pour logs de sauvegarde correctement parsÃ©s
  if "plesk_backup" in [tags] and !("_grokparsefailure_backup" in [tags]) {
    elasticsearch {
      hosts => ["http://192.168.56.101:9200"]
      index => "pleskss-backup-%{+YYYY.MM.dd}"
    }

    file {
      path => "/var/log/logstash/plesk-backup-%{+YYYY-MM-dd}.log"
      codec => line {
        format => "%{[@timestamp]} %{log_source} %{log.level} %{message}"
      }
    }

    stdout {
      codec => rubydebug { metadata => true }
    }
  }

  # Sortie pour logs avec erreur de parsing
  if "_grokparsefailure_backup" in [tags] {
    file {
      path => "/var/log/logstash/error-backup-%{+YYYY-MM-dd}.log"
      codec => rubydebug
    }

    stdout {
      codec => rubydebug
    }
  }
}
